package com.example.administrator.obdcheckerforaytophix10;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OBDL".
*/
public class OBDLDao extends AbstractDao<OBDL, Long> {

    public static final String TABLENAME = "OBDL";

    /**
     * Properties of entity OBDL.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Key = new Property(1, String.class, "key", false, "KEY");
        public final static Property Color = new Property(2, String.class, "color", false, "COLOR");
        public final static Property Value = new Property(3, int.class, "value", false, "VALUE");
        public final static Property IsTure = new Property(4, boolean.class, "isTure", false, "IS_TURE");
        public final static Property FloValue = new Property(5, float.class, "floValue", false, "FLO_VALUE");
    }


    public OBDLDao(DaoConfig config) {
        super(config);
    }
    
    public OBDLDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OBDL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"KEY\" TEXT," + // 1: key
                "\"COLOR\" TEXT," + // 2: color
                "\"VALUE\" INTEGER NOT NULL ," + // 3: value
                "\"IS_TURE\" INTEGER NOT NULL ," + // 4: isTure
                "\"FLO_VALUE\" REAL NOT NULL );"); // 5: floValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OBDL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OBDL entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(2, key);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(3, color);
        }
        stmt.bindLong(4, entity.getValue());
        stmt.bindLong(5, entity.getIsTure() ? 1L: 0L);
        stmt.bindDouble(6, entity.getFloValue());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OBDL entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(2, key);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(3, color);
        }
        stmt.bindLong(4, entity.getValue());
        stmt.bindLong(5, entity.getIsTure() ? 1L: 0L);
        stmt.bindDouble(6, entity.getFloValue());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OBDL readEntity(Cursor cursor, int offset) {
        OBDL entity = new OBDL( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // key
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // color
            cursor.getInt(offset + 3), // value
            cursor.getShort(offset + 4) != 0, // isTure
            cursor.getFloat(offset + 5) // floValue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OBDL entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKey(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setColor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setValue(cursor.getInt(offset + 3));
        entity.setIsTure(cursor.getShort(offset + 4) != 0);
        entity.setFloValue(cursor.getFloat(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OBDL entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OBDL entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OBDL entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
